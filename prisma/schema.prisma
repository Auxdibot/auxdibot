generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

type APIEmbedAuthor {
  proxy_icon_url String?
  icon_url       String?
  name           String
  url            String?
}

type APIEmbedFooter {
  proxy_icon_url String?
  icon_url       String?
  text           String
}

type APIEmbedField {
  name   String
  value  String
  inline Boolean?
}

type APIEmbedImgThumbnail {
  height    Int?
  proxy_url String?
  url       String
  width     Int?
}

type APIEmbed {
  author      APIEmbedAuthor?
  fields      APIEmbedField[]
  footer      APIEmbedFooter?
  thumbnail   APIEmbedImgThumbnail?
  image       APIEmbedImgThumbnail?
  color       Int?                  @default(0)
  title       String?
  description String?
  type        String?               @default("rich")
  url         String?
}

enum PunishmentType {
  DELETE_MESSAGE
  WARN
  KICK
  MUTE
  BAN
}

enum LogAction {
  ERROR
  LOG_CHANNEL_CHANGED
  MUTE_ROLE_CHANGED
  WARN
  KICK
  MUTE
  BAN
  UNMUTE
  UNBAN
  MEMBER_JOIN
  MEMBER_LEAVE
  MEMBER_DEAFENED
  MEMBER_MUTED
  CHANNEL_CREATED
  CHANNEL_DELETED
  PUNISHMENT_EXPIRED
  PUNISHMENT_DELETED
  PUNISHMENT_EDITED
  // deprecated, but needed because of old data
  PERMISSION_CREATED
  PERMISSION_DELETED
  // deprecated, but needed because of old data
  MESSAGES_PURGED
  AUTOMOD_SETTINGS_CHANGE
  MESSAGE_EDITED
  MESSAGE_DELETED
  MESSAGE_DELETED_AUTOMOD
  THREAD_CREATED
  THREAD_DELETED
  JOIN_LEAVE_CHANNEL_CHANGED
  JOIN_ROLE_ADDED
  JOIN_ROLE_REMOVED
  STICKY_ROLE_ADDED
  STICKY_ROLE_REMOVED
  REACTION_ROLE_ADDED
  REACTION_ROLE_REMOVED
  REACTION_ROLE_EDITED
  MASSROLE_GIVEN
  MASSROLE_TAKEN
  SUGGESTION_CREATED
  SUGGESTIONS_CHANNEL_CHANGED
  SUGGESTIONS_UPDATES_CHANNEL_CHANGED
  SUGGESTIONS_AUTO_DELETE_CHANGED
  SUGGESTIONS_THREAD_CREATION_CHANGED
  SUGGESTION_DELETED
  STARBOARD_CREATED
  STARBOARD_DELETED
  STARBOARD_SETTINGS_CHANGED
  STARBOARD_CHANNEL_CHANGED
  STARBOARD_REACTION_CHANGED
  STARBOARD_REACTION_COUNT_CHANGED
  STARBOARD_MESSAGE_DELETED
  SCHEDULED_MESSAGE_CREATED
  SCHEDULED_MESSAGE_EDITED
  SCHEDULED_MESSAGE_REMOVED
  LEVEL_CHANNEL_CHANGED
  LEVEL_REWARD_CREATED
  LEVEL_REWARD_DELETED
  MULTIPLIER_CREATED
  MULTIPLIER_DELETED
  MULTIPLIER_SET
  CHANNEL_LOCKED
  CHANNEL_UNLOCKED
  SERVER_LOCKED
  SERVER_UNLOCKED
  REPORTS_CHANNEL_CHANGED
  REPORTS_ROLE_CHANGED
  NOTIFICATION_CREATED
  NOTIFICATION_DELETED
  COMMAND_RULES_CHANGED
  EMBED_STORED
  EMBED_DELETED
  AUXDIBOT_ANNOUNCEMENT
  PREMIUM_ADDED
  PREMIUM_REMOVED
  APPEAL_CREATED
  APPEAL_ACCEPTED
  APPEAL_DENIED
  APPEAL_CHANNEL_CHANGED
}

type LevelReward {
  level  Int
  roleID String
}

type Reaction {
  emoji String
  role  String
}

enum ReactionRoleType {
  DEFAULT
  SELECT_ONE
  STICKY
  STICKY_SELECT_ONE
  BUTTON
  BUTTON_SELECT_ONE
  SELECT_ONE_MENU
  SELECT_MENU
}

type ReactionRole {
  messageID String
  channelID String
  reactions Reaction[]
  type      ReactionRoleType @default(DEFAULT)
}

enum FeedType {
  TWITCH
  YOUTUBE
  RSS
}

type MessageContent {
  content String?
  embed   APIEmbed?
}

type Notification {
  topicURL      String
  message       MessageContent
  channelID     String
  type          FeedType
  previous_data String?
}

enum SuggestionState {
  WAITING
  DENIED
  CONSIDERED
  APPROVED
  ADDED
}

type ScheduledMessage {
  channelID          String
  interval_timestamp String    @default("1d")
  last_run           DateTime? @default(now())
  times_run          Int?
  embed              APIEmbed?
  message            String?
  times_to_run       Int?
}

type AutomodPunishment {
  punishment PunishmentType @default(WARN)
  reason     String?        @default("You exceeded a limit!")
}

type AutomodLimit {
  duration Int
  messages Int
}

type ChannelLock {
  expiration_date DateTime?
  channelID       String
  reason          String?
}

type CardBackground {
  color1   String        @default("#000000")
  color2   String        @default("#000000")
  gradient GradientTypes @default(BACKGROUND)
}

type StarLevel {
  message_reaction String
  color            Int
  stars            Int
}

type StarboardBoardData {
  channelID   String
  reaction    String      @default("‚≠ê")
  count       Int         @default(3)
  board_name  String      @default("starboard")
  star_levels StarLevel[]
}

type CommandPermission {
  command                 String
  group                   String?
  disabled                Boolean? @default(false)
  subcommand              String?
  blacklist_channels      String[]
  blacklist_roles         String[]
  roles                   String[]
  channels                String[]
  permission_bypass_roles String[]
  discord_permissions     String[]
  channel_output          String?
  // Deprecated, will be removed in next non-patch update
  old_admin_only          Boolean? @default(false) @map("admin_only")
}

type Reminder {
  interval_timestamp String?   @default("1d")
  last_run           DateTime? @default(now())
  times_run          Int?
  embed              APIEmbed?
  date_to_run        DateTime?
  message            String?
  times_to_run       Int?
}

enum Fonts {
  MONTSERRAT
  RALEWAY
  OSWALD
  PLAYFAIR_DISPLAY
  JOSEFIN_SLAB
  BAUHAUS_93
  INTER
  ROBOTO
  LATO
  OPEN_SANS
}

enum UserBadge {
  OLD_USER
  PARTNER
}

enum GradientTypes {
  LINEAR
  RADIAL
  BACKGROUND
}

type Multiplier {
  id         String
  multiplier Float
}

type StoredEmbed {
  id           String
  embed        APIEmbed?
  content      String?
  webhook_url  String?
  date_created DateTime  @default(now())
}

type AppealData {
  date_appealed DateTime  @default(now())
  content       String    @default("")
  accepted      Boolean?
  accepted_date DateTime?
  moderatorID   String?
  appeal_reason String?
}

model servermembers {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  v                      Int?     @map("__v")
  userID                 String
  serverID               String
  warns                  Int      @default(0)
  in_server              Boolean  @default(true)
  sticky_roles           String[] @default([])
  suggestions_banned     Boolean? @default(false)
  reports_banned         Boolean? @default(false)
  xp                     Int?     @default(0)
  level_message_disabled Boolean? @default(false)

  @@unique([serverID, userID])
}

model servers {
  id                                String               @id @default(auto()) @map("_id") @db.ObjectId
  v                                 Int?                 @map("__v")
  serverID                          String
  disabled_modules                  String[]
  join_dm_embed                     APIEmbed?
  join_embed                        APIEmbed?
  leave_embed                       APIEmbed?
  join_dm_text                      String?
  join_text                         String?
  leave_text                        String?
  join_leave_channel                String?
  log_channel                       String?
  mute_role                         String?
  join_roles                        String[]
  sticky_roles                      String[]
  reaction_roles                    ReactionRole[]
  suggestions_reactions             String[]             @default([])
  suggestions_channel               String?
  suggestions_updates_channel       String?
  suggestions_auto_delete           Boolean              @default(true)
  suggestions_discussion_threads    Boolean              @default(true)
  message_xp_range                  Int[]                @default([20])
  voice_xp_range                    Int[]                @default([5])
  starboard_xp_range                Int[]                @default([50])
  event_xp_range                    Int[]                @default([100])
  publicize_leaderboard             Boolean              @default(true)
  level_rewards                     LevelReward[]
  level_message                     MessageContent?
  level_channel                     String?
  level_embed                       Boolean              @default(true)
  channel_multipliers               Multiplier[]
  role_multipliers                  Multiplier[]
  global_multiplier                 Float                @default(1)
  starboard_boards                  StarboardBoardData[]
  self_star                         Boolean              @default(true)
  starboard_star                    Boolean              @default(true)
  total_starred_messages            Int                  @default(0)
  total_stars                       Int                  @default(0)
  filtered_logs                     LogAction[]
  commands_channel                  String?
  command_permissions               CommandPermission[]
  scheduled_messages                ScheduledMessage[]
  punishment_send_reason            Boolean              @default(true)
  punishment_send_moderator         Boolean              @default(false)
  automod_banned_phrases            String[]             @default([])
  automod_banned_phrases_punishment PunishmentType?      @default(WARN)
  automod_punish_threshold_warns    Int?                 @default(3)
  automod_threshold_punishment      PunishmentType?      @default(MUTE)
  automod_attachments_limit         AutomodLimit?
  automod_invites_limit             AutomodLimit?
  automod_spam_limit                AutomodLimit?
  automod_attachments_punishment    AutomodPunishment?
  automod_invites_punishment        AutomodPunishment?
  automod_spam_punishment           AutomodPunishment?
  reports_channel                   String?
  notifications                     Notification[]
  report_role                       String?
  automod_role_exceptions           String[]             @default([])
  appeal_channel                    String?
  locked_channels                   ChannelLock[]
  stored_embeds                     StoredEmbed[]

  @@unique([serverID])
}

model suggestions {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  v                    Int?            @map("__v")
  serverID             String
  suggestionID         Int             @default(-1)
  messageID            String?
  creatorID            String          @default("")
  status               SuggestionState @default(WAITING)
  date                 DateTime?       @default(now())
  content              String          @default("")
  handlerID            String?
  handled_reason       String?
  discussion_thread_id String?

  @@unique([serverID, suggestionID])
}

model starred_messages {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  v                  Int?     @map("__v")
  serverID           String
  starboard_message  String
  starred_message_id String
  starred_channel_id String
  board              String
  date               DateTime @default(now())

  @@unique([serverID, board, starred_message_id])
}

model logs {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  v           Int?      @map("__v")
  serverID    String
  type        LogAction
  userID      String
  date        DateTime? @default(now())
  description String    @default("")

  @@unique([serverID, id])
}

model punishments {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  v            Int?           @map("__v")
  serverID     String
  date         DateTime       @default(now())
  expires_date DateTime?
  reason       String         @default("")
  dmed         Boolean        @default(false)
  userID       String
  moderatorID  String?
  punishmentID Int
  type         PunishmentType
  expired      Boolean        @default(false)
  appeal       AppealData?

  @@unique([serverID, punishmentID])
}

model servercards {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  v                Int?            @map("__v")
  serverID         String          @unique
  description      String?
  invite_url       String?
  background       CardBackground?
  header_font      Fonts?          @default(BAUHAUS_93)
  text_font        Fonts?          @default(OPEN_SANS)
  rules            String[]
  public           Boolean         @default(false)
  featured         Boolean         @default(false)
  featured_channel String?
  dark             Boolean         @default(true)
}

model totals {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  v           Int?   @map("__v")
  serverID    String @unique
  punishments Int    @default(0)
  suggestions Int    @default(0)
}

model users {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userID            String      @unique
  voted_date        DateTime?
  badges            UserBadge[]
  reminders         Reminder[]
  created_date      DateTime?   @default(now())
  premium_servers   String[]    @default([])
  level_card_border String?     @default("#FF0000:#FFA500")
  level_card_bar    String?     @default("#FF0000:#FFA500")
}

model analytics {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  botID            String @unique
  starred_messages Int    @default(0)
  levelups         Int    @default(0)
  commands         Int    @default(0)
  logs             Int    @default(0)
  punishments      Int    @default(0)
  embeds           Int    @default(0)
  suggestions      Int    @default(0)
  greetings        Int    @default(0)
}
